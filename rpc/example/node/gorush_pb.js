/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var protobuf_ptypes_struct_struct_pb = require('./protobuf/ptypes/struct/struct_pb.js');
goog.exportSymbol('proto.proto.Alert', null, global);
goog.exportSymbol('proto.proto.HealthCheckRequest', null, global);
goog.exportSymbol('proto.proto.HealthCheckResponse', null, global);
goog.exportSymbol('proto.proto.HealthCheckResponse.ServingStatus', null, global);
goog.exportSymbol('proto.proto.NotificationReply', null, global);
goog.exportSymbol('proto.proto.NotificationRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Alert = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Alert.repeatedFields_, null);
};
goog.inherits(proto.proto.Alert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Alert.displayName = 'proto.proto.Alert';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Alert.repeatedFields_ = [9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Alert.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Alert.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Alert} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.Alert.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: msg.getTitle(),
    body: msg.getBody(),
    subtitle: msg.getSubtitle(),
    action: msg.getAction(),
    actionlockey: msg.getActionlockey(),
    launchimage: msg.getLaunchimage(),
    lockey: msg.getLockey(),
    titlelockey: msg.getTitlelockey(),
    locargsList: jspb.Message.getField(msg, 9),
    titlelocargsList: jspb.Message.getField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Alert}
 */
proto.proto.Alert.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Alert;
  return proto.proto.Alert.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Alert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Alert}
 */
proto.proto.Alert.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubtitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionlockey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLaunchimage(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLockey(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitlelockey(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.getLocargsList().push(value);
      msg.setLocargsList(msg.getLocargsList());
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.getTitlelocargsList().push(value);
      msg.setTitlelocargsList(msg.getTitlelocargsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.Alert} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Alert.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Alert.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.Alert.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBody();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getSubtitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAction();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getActionlockey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getLaunchimage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getLockey();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getTitlelockey();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getLocargsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = this.getTitlelocargsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.Alert} The clone.
 */
proto.proto.Alert.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.Alert} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.proto.Alert.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.proto.Alert.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string body = 2;
 * @return {string}
 */
proto.proto.Alert.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.proto.Alert.prototype.setBody = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string subtitle = 3;
 * @return {string}
 */
proto.proto.Alert.prototype.getSubtitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.proto.Alert.prototype.setSubtitle = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string action = 4;
 * @return {string}
 */
proto.proto.Alert.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.proto.Alert.prototype.setAction = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string actionLocKey = 5;
 * @return {string}
 */
proto.proto.Alert.prototype.getActionlockey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.proto.Alert.prototype.setActionlockey = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string launchImage = 6;
 * @return {string}
 */
proto.proto.Alert.prototype.getLaunchimage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.proto.Alert.prototype.setLaunchimage = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string locKey = 7;
 * @return {string}
 */
proto.proto.Alert.prototype.getLockey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.proto.Alert.prototype.setLockey = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string titleLocKey = 8;
 * @return {string}
 */
proto.proto.Alert.prototype.getTitlelockey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.proto.Alert.prototype.setTitlelockey = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * repeated string locArgs = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.proto.Alert.prototype.getLocargsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 9));
};


/** @param {Array.<string>} value  */
proto.proto.Alert.prototype.setLocargsList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


proto.proto.Alert.prototype.clearLocargsList = function() {
  jspb.Message.setField(this, 9, []);
};


/**
 * repeated string titleLocArgs = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.proto.Alert.prototype.getTitlelocargsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 10));
};


/** @param {Array.<string>} value  */
proto.proto.Alert.prototype.setTitlelocargsList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


proto.proto.Alert.prototype.clearTitlelocargsList = function() {
  jspb.Message.setField(this, 10, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NotificationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.NotificationRequest.repeatedFields_, null);
};
goog.inherits(proto.proto.NotificationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.NotificationRequest.displayName = 'proto.proto.NotificationRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.NotificationRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NotificationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NotificationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NotificationRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.NotificationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokensList: jspb.Message.getField(msg, 1),
    platform: msg.getPlatform(),
    message: msg.getMessage(),
    title: msg.getTitle(),
    topic: msg.getTopic(),
    key: msg.getKey(),
    badge: msg.getBadge(),
    category: msg.getCategory(),
    alert: (f = msg.getAlert()) && proto.proto.Alert.toObject(includeInstance, f),
    sound: msg.getSound(),
    contentavailable: msg.getContentavailable(),
    threadid: msg.getThreadid(),
    mutablecontent: msg.getMutablecontent(),
    data: (f = msg.getData()) && protobuf_ptypes_struct_struct_pb.Struct.toObject(includeInstance, f),
    image: msg.getImage(),
    priority: msg.getPriority()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NotificationRequest}
 */
proto.proto.NotificationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NotificationRequest;
  return proto.proto.NotificationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NotificationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NotificationRequest}
 */
proto.proto.NotificationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getTokensList().push(value);
      msg.setTokensList(msg.getTokensList());
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlatform(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBadge(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 9:
      var value = new proto.proto.Alert;
      reader.readMessage(value,proto.proto.Alert.deserializeBinaryFromReader);
      msg.setAlert(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSound(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContentavailable(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setThreadid(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMutablecontent(value);
      break;
    case 14:
      var value = new protobuf_ptypes_struct_struct_pb.Struct;
      reader.readMessage(value,protobuf_ptypes_struct_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriority(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.NotificationRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.NotificationRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NotificationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.NotificationRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTokensList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = this.getPlatform();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getTopic();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getKey();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getBadge();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = this.getCategory();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getAlert();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.proto.Alert.serializeBinaryToWriter
    );
  }
  f = this.getSound();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getContentavailable();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = this.getThreadid();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getMutablecontent();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = this.getData();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      protobuf_ptypes_struct_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = this.getImage();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = this.getPriority();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.NotificationRequest} The clone.
 */
proto.proto.NotificationRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.NotificationRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string tokens = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.proto.NotificationRequest.prototype.getTokensList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.proto.NotificationRequest.prototype.setTokensList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.proto.NotificationRequest.prototype.clearTokensList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * optional int32 platform = 2;
 * @return {number}
 */
proto.proto.NotificationRequest.prototype.getPlatform = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.proto.NotificationRequest.prototype.setPlatform = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.proto.NotificationRequest.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.proto.NotificationRequest.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string title = 4;
 * @return {string}
 */
proto.proto.NotificationRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.proto.NotificationRequest.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string topic = 5;
 * @return {string}
 */
proto.proto.NotificationRequest.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.proto.NotificationRequest.prototype.setTopic = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string key = 6;
 * @return {string}
 */
proto.proto.NotificationRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.proto.NotificationRequest.prototype.setKey = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 badge = 7;
 * @return {number}
 */
proto.proto.NotificationRequest.prototype.getBadge = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.proto.NotificationRequest.prototype.setBadge = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string category = 8;
 * @return {string}
 */
proto.proto.NotificationRequest.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.proto.NotificationRequest.prototype.setCategory = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional Alert alert = 9;
 * @return {proto.proto.Alert}
 */
proto.proto.NotificationRequest.prototype.getAlert = function() {
  return /** @type{proto.proto.Alert} */ (
    jspb.Message.getWrapperField(this, proto.proto.Alert, 9));
};


/** @param {proto.proto.Alert|undefined} value  */
proto.proto.NotificationRequest.prototype.setAlert = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.proto.NotificationRequest.prototype.clearAlert = function() {
  this.setAlert(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.proto.NotificationRequest.prototype.hasAlert = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string sound = 10;
 * @return {string}
 */
proto.proto.NotificationRequest.prototype.getSound = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.proto.NotificationRequest.prototype.setSound = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional bool contentAvailable = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.NotificationRequest.prototype.getContentavailable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 11, false));
};


/** @param {boolean} value  */
proto.proto.NotificationRequest.prototype.setContentavailable = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string threadID = 12;
 * @return {string}
 */
proto.proto.NotificationRequest.prototype.getThreadid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 12, ""));
};


/** @param {string} value  */
proto.proto.NotificationRequest.prototype.setThreadid = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional bool mutableContent = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.NotificationRequest.prototype.getMutablecontent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 13, false));
};


/** @param {boolean} value  */
proto.proto.NotificationRequest.prototype.setMutablecontent = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional google.protobuf.Struct data = 14;
 * @return {proto.google.protobuf.Struct}
 */
proto.proto.NotificationRequest.prototype.getData = function() {
  return /** @type{proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, protobuf_ptypes_struct_struct_pb.Struct, 14));
};


/** @param {proto.google.protobuf.Struct|undefined} value  */
proto.proto.NotificationRequest.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.proto.NotificationRequest.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.proto.NotificationRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string image = 15;
 * @return {string}
 */
proto.proto.NotificationRequest.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 15, ""));
};


/** @param {string} value  */
proto.proto.NotificationRequest.prototype.setImage = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string priority = 16;
 * @return {string}
 */
proto.proto.NotificationRequest.prototype.getPriority = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 16, ""));
};


/** @param {string} value  */
proto.proto.NotificationRequest.prototype.setPriority = function(value) {
  jspb.Message.setField(this, 16, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NotificationReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.NotificationReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.NotificationReply.displayName = 'proto.proto.NotificationReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NotificationReply.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NotificationReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NotificationReply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.NotificationReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: msg.getSuccess(),
    counts: msg.getCounts()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NotificationReply}
 */
proto.proto.NotificationReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NotificationReply;
  return proto.proto.NotificationReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NotificationReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NotificationReply}
 */
proto.proto.NotificationReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.NotificationReply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.NotificationReply.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NotificationReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.NotificationReply.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getCounts();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.NotificationReply} The clone.
 */
proto.proto.NotificationReply.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.NotificationReply} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.NotificationReply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.proto.NotificationReply.prototype.setSuccess = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 counts = 2;
 * @return {number}
 */
proto.proto.NotificationReply.prototype.getCounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.proto.NotificationReply.prototype.setCounts = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.HealthCheckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.HealthCheckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.HealthCheckRequest.displayName = 'proto.proto.HealthCheckRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.HealthCheckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.HealthCheckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.HealthCheckRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.HealthCheckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    service: msg.getService()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.HealthCheckRequest}
 */
proto.proto.HealthCheckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.HealthCheckRequest;
  return proto.proto.HealthCheckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.HealthCheckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.HealthCheckRequest}
 */
proto.proto.HealthCheckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setService(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.HealthCheckRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.HealthCheckRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.HealthCheckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.HealthCheckRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getService();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.HealthCheckRequest} The clone.
 */
proto.proto.HealthCheckRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.HealthCheckRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string service = 1;
 * @return {string}
 */
proto.proto.HealthCheckRequest.prototype.getService = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.proto.HealthCheckRequest.prototype.setService = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.HealthCheckResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.HealthCheckResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.HealthCheckResponse.displayName = 'proto.proto.HealthCheckResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.HealthCheckResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.HealthCheckResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.HealthCheckResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.proto.HealthCheckResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: msg.getStatus()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.HealthCheckResponse}
 */
proto.proto.HealthCheckResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.HealthCheckResponse;
  return proto.proto.HealthCheckResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.HealthCheckResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.HealthCheckResponse}
 */
proto.proto.HealthCheckResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.HealthCheckResponse.ServingStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.proto.HealthCheckResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.HealthCheckResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.HealthCheckResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.proto.HealthCheckResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.proto.HealthCheckResponse} The clone.
 */
proto.proto.HealthCheckResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.proto.HealthCheckResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ServingStatus status = 1;
 * @return {!proto.proto.HealthCheckResponse.ServingStatus}
 */
proto.proto.HealthCheckResponse.prototype.getStatus = function() {
  return /** @type {!proto.proto.HealthCheckResponse.ServingStatus} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.proto.HealthCheckResponse.ServingStatus} value  */
proto.proto.HealthCheckResponse.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.proto.HealthCheckResponse.ServingStatus = {
  UNKNOWN: 0,
  SERVING: 1,
  NOT_SERVING: 2
};

goog.object.extend(exports, proto.proto);
